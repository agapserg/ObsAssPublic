import os
import sqlite3
from datetime import datetime as dt
from aiogram import Bot, Dispatcher, types
from aiogram.dispatcher import FSMContext
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
import logging
from datetime import timedelta
import matplotlib.colors as mcolors
import numpy as np
import calendar
import re
from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
from pathlib import Path
import pandas as pd
from pathlib import Path
import numpy as np
import calendar
import matplotlib.pyplot as plt
from matplotlib.colors import ListedColormap
from collections import Counter
import pandas as pd
from aiogram.types import ParseMode
from aiogram.types import Message, ContentType
import random
from apscheduler.schedulers.asyncio import AsyncIOScheduler
import os
import re
import random
import sqlite3
from contextlib import closing
from yt_dlp import YoutubeDL
import asyncio
import glob

from config import TOKEN, ROOT_PATH, READ_LATER_PATH, BOOK_PATH, WAKE_UP_PATH, SLEEP_PATH, VIDEO_PATH, PHOTO_PATH

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
global last_photo_time, last_photo_index
last_photo_time = None
last_photo_index = 0

logging.basicConfig(level=logging.INFO)

bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)
dp.middleware.setup(LoggingMiddleware())
BASE_PATH = ROOT_PATH
directory = BOOK_PATH

async def send_birthday(user_id, days):
    directory = ROOT_PATH
    birthday_pattern = r'- \[ \] üü©üéÇ (.+) ‚è´ üîÅ every year ‚ûï \d{4}-\d{2}-\d{2} üìÖ (\d{4}-\d{2}-\d{2})'
    upcoming_birthdays = []
    today = dt.now().date()

    for root, _, files in os.walk(directory):
        for file in files:
            if file.endswith(".md"):
                with open(os.path.join(root, file), 'r', encoding='utf-8') as f:
                    content = f.read()
                    found_birthdays = re.findall(birthday_pattern, content)
                    for name, date in found_birthdays:
                        birthday_date = dt.strptime(date, '%Y-%m-%d').date()
                        if 0 <= (birthday_date - today).days < days:
                            upcoming_birthdays.append((name, date, birthday_date))

    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–∞—Ç–µ —Ä–æ–∂–¥–µ–Ω–∏—è
    upcoming_birthdays.sort(key=lambda x: x[2])

    if upcoming_birthdays:
        birthday_message = f"–í –±–ª–∏–∂–∞–π—à–∏–µ {days} –¥–Ω–µ–π –±—É–¥—É—Ç –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è —É –≤–æ—Ç —ç—Ç–∏—Ö –ª—é–¥–µ–π:\n"
        birthday_message += "\n".join([f"‚ñ∂Ô∏è {date} - {name}" for name, date, _ in upcoming_birthdays])
        birthday_message += "\n\n–ù–µ –∑–∞–±—É–¥—å –Ω–∞–ø–∏—Å–∞—Ç—å –∏–º –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞—Ä–∞–Ω–µ–µ –∏–ª–∏ –∫—É–ø–∏—Ç—å –ø–æ–¥–∞—Ä–∫–∏"
    else:
        birthday_message = "–í –±–ª–∏–∂–∞–π—à–∏–µ –¥–Ω–∏ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏–π –Ω–µ—Ç."

    await bot.send_message(user_id, birthday_message)

async def send_random_shorts(user_id):
    directory = ROOT_PATH
    db_path = "shorts.db"  # –ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –ë–î

    with closing(sqlite3.connect(db_path)) as connection:
        with closing(connection.cursor()) as cursor:
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS shorts (
                    id INTEGER PRIMARY KEY,
                    file TEXT NOT NULL,
                    short TEXT NOT NULL,
                    send_count INTEGER DEFAULT 0,
                    UNIQUE(file, short)
                )
            ''')
            connection.commit()

            # –ò–∑–º–µ–Ω–µ–Ω–Ω—ã–π —à–∞–±–ª–æ–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ YouTube Shorts URL
            shorts_pattern = r'https?://(?:www\.)?youtube\.com/shorts/[^\s?]+'

            shorts = []

            for root, _, files in os.walk(directory):
                for file in files:
                    if file.endswith(".md"):
                        with open(os.path.join(root, file), 'r', encoding='utf-8') as f:
                            content = f.read()
                            found_shorts = re.findall(shorts_pattern, content)
                            for short in found_shorts:
                                shorts.append((file, short))

            cursor.execute('SELECT file, short FROM shorts')
            sent_shorts = cursor.fetchall()
            unsent_shorts = [s for s in shorts if s not in sent_shorts]

            if not unsent_shorts:
                cursor.execute('DELETE FROM shorts')
                connection.commit()
                unsent_shorts = shorts.copy()

            selected_file, selected_short = random.choice(unsent_shorts)
            short_index = shorts.index((selected_file, selected_short)) + 1
            total_shorts = len(shorts)
            message = f"{short_index}/{total_shorts} - {selected_file}\n\n{selected_short}"

            cursor.execute('''
                INSERT INTO shorts (file, short, send_count)
                VALUES (?, ?, 1)
                ON CONFLICT(file, short)
                DO UPDATE SET send_count = send_count + 1
            ''', (selected_file, selected_short))
            connection.commit()

    await bot.send_message(user_id, message)

async def send_random_rss(user_id):
    file_path = READ_LATER_PATH
    db_path = "RSS.db"  # –ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –ë–î

    # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ—Ç–∫—Ä—ã–≤–∞–µ–º –ë–î –∏ —Ç–∞–±–ª–∏—Ü—É
    with closing(sqlite3.connect(db_path)) as connection:
        with closing(connection.cursor()) as cursor:
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS quotes (
                    id INTEGER PRIMARY KEY,
                    file TEXT NOT NULL,
                    quote TEXT NOT NULL,
                    send_count INTEGER DEFAULT 0,
                    UNIQUE(file, quote)
                )
            ''')
            connection.commit()

            # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –∏ –∏—â–µ–º —Ü–∏—Ç–∞—Ç—ã
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()

            quotes = re.findall(r'- \[ \] (.+)', content)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–∏–µ —Ü–∏—Ç–∞—Ç—ã —É–∂–µ –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã
            cursor.execute('SELECT quote FROM quotes WHERE file = ?', (file_path,))
            sent_quotes = [row[0] for row in cursor.fetchall()]
            unsent_quotes = [q for q in quotes if q not in sent_quotes]

            # –ï—Å–ª–∏ –≤—Å–µ —Ü–∏—Ç–∞—Ç—ã –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã, –æ—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
            if not unsent_quotes:
                cursor.execute('DELETE FROM quotes WHERE file = ?', (file_path,))
                connection.commit()
                unsent_quotes = quotes.copy()

            # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é —Ü–∏—Ç–∞—Ç—É
            selected_quote = random.choice(unsent_quotes)
            quote_index = quotes.index(selected_quote) + 1
            total_quotes = len(quotes)
            message = f"{quote_index}/{total_quotes} - {file_path}\n\n{selected_quote}"

            # –û–±–Ω–æ–≤–ª—è–µ–º –ë–î
            cursor.execute('''
                INSERT INTO quotes (file, quote, send_count)
                VALUES (?, ?, 1)
                ON CONFLICT(file, quote)
                DO UPDATE SET send_count = send_count + 1
            ''', (file_path, selected_quote))
            connection.commit()

            # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∞–π–ª, –∑–∞–º–µ–Ω—è—è "- [ ]" –Ω–∞ "- [x]"
            updated_content = re.sub(r'- \[ \] ' + re.escape(selected_quote), '- [x] ' + selected_quote, content, 1)
            with open(file_path, 'w', encoding='utf-8') as f:
                f.write(updated_content)

    await bot.send_message(user_id, message)

async def send_random_minds(user_id):
    directory = ROOT_PATH
    db_path = "Minds.db"  # –û–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –ë–î

    # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ—Ç–∫—Ä—ã–≤–∞–µ–º –ë–î –∏ —Ç–∞–±–ª–∏—Ü—É
    with closing(sqlite3.connect(db_path)) as connection:
        with closing(connection.cursor()) as cursor:
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS quotes (
                    id INTEGER PRIMARY KEY,
                    file TEXT NOT NULL,
                    quote TEXT NOT NULL,
                    send_count INTEGER DEFAULT 0,
                    UNIQUE(file, quote)
                )
            ''')
            connection.commit()

            # –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —à–∞–±–ª–æ–Ω –ø–æ–∏—Å–∫–∞
            prefix_pattern = r'- \[x\] #–º—ã—Å–ª–∏ üü© (.+)'
            quotes = []
            for root, _, files in os.walk(directory):
                for file in files:
                    if file.endswith(".md"):
                        with open(os.path.join(root, file), 'r', encoding='utf-8') as f:
                            content = f.read()
                            found_quotes = re.findall(prefix_pattern, content)
                            for quote in found_quotes:
                                quotes.append((file, quote))

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–∏–µ —Ü–∏—Ç–∞—Ç—ã —É–∂–µ –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã
            cursor.execute('SELECT file, quote FROM quotes')
            sent_quotes = cursor.fetchall()
            unsent_quotes = [q for q in quotes if q not in sent_quotes]

            # –ï—Å–ª–∏ –≤—Å–µ —Ü–∏—Ç–∞—Ç—ã –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã, –æ—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
            if not unsent_quotes:
                cursor.execute('DELETE FROM quotes')
                connection.commit()
                unsent_quotes = quotes.copy()

            # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é —Ü–∏—Ç–∞—Ç—É
            selected_file, selected_quote = random.choice(unsent_quotes)
            quote_index = quotes.index((selected_file, selected_quote)) + 1
            total_quotes = len(quotes)
            message = f"{quote_index}/{total_quotes} - {selected_file}\n\n{selected_quote}"

            # –û–±–Ω–æ–≤–ª—è–µ–º –ë–î
            cursor.execute('''
                INSERT INTO quotes (file, quote, send_count)
                VALUES (?, ?, 1)
                ON CONFLICT(file, quote)
                DO UPDATE SET send_count = send_count + 1
            ''', (selected_file, selected_quote))
            connection.commit()

    await bot.send_message(user_id, message)

async def send_random_quote(user_id):
    directory = BOOK_PATH
    db_path = "quotes_database.db"  # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –ë–î

    # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ—Ç–∫—Ä—ã–≤–∞–µ–º –ë–î –∏ —Ç–∞–±–ª–∏—Ü—É
    with closing(sqlite3.connect(db_path)) as connection:
        with closing(connection.cursor()) as cursor:
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS quotes (
                    id INTEGER PRIMARY KEY,
                    file TEXT NOT NULL,
                    quote TEXT NOT NULL,
                    send_count INTEGER DEFAULT 0,
                    UNIQUE(file, quote)
                )
            ''')
            connection.commit()

            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ü–∏—Ç–∞—Ç
            prefix_patterns = [
                r'- \[[ ]\] üü© (.+)',
                r'- \[[x]\] üü© (.+)',
            ]
            quotes = []
            for root, _, files in os.walk(directory):
                for file in files:
                    if file.endswith(".md"):
                        with open(os.path.join(root, file), 'r', encoding='utf-8') as f:
                            content = f.read()
                            for pattern in prefix_patterns:
                                found_quotes = re.findall(pattern, content)
                                for quote in found_quotes:
                                    quote = re.sub(r'TG - \[razbivator\]\(https://t.me/razbivator_bot\) ', '', quote)
                                    quote = re.sub(r'TG - \[ReadStreakBot\]\(https://t.me/ReadStreakBot\) ', '', quote)
                                    quotes.append((file, quote))

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–∏–µ —Ü–∏—Ç–∞—Ç—ã —É–∂–µ –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã
            cursor.execute('SELECT file, quote FROM quotes')
            sent_quotes = cursor.fetchall()
            unsent_quotes = [q for q in quotes if q not in sent_quotes]

            # –ï—Å–ª–∏ –≤—Å–µ —Ü–∏—Ç–∞—Ç—ã –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã, –æ—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
            if not unsent_quotes:
                cursor.execute('DELETE FROM quotes')
                connection.commit()
                unsent_quotes = quotes.copy()

            # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é —Ü–∏—Ç–∞—Ç—É
            selected_file, selected_quote = random.choice(unsent_quotes)
            quote_index = quotes.index((selected_file, selected_quote)) + 1
            total_quotes = len(quotes)
            message = f"{quote_index}/{total_quotes} - {selected_file}\n\n{selected_quote}"

            # –û–±–Ω–æ–≤–ª—è–µ–º –ë–î
            cursor.execute('''
                INSERT INTO quotes (file, quote, send_count)
                VALUES (?, ?, 1)
                ON CONFLICT(file, quote)
                DO UPDATE SET send_count = send_count + 1
            ''', (selected_file, selected_quote))
            connection.commit()

    await bot.send_message(user_id, message)

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /quote
@dp.message_handler(commands=['quote'])
async def quote_handler(message: types.Message):
    user_id = message.from_user.id
    await send_random_quote(user_id)

@dp.message_handler(commands=['minds'])
async def quote_handler(message: types.Message):
    user_id = message.from_user.id
    await send_random_minds(user_id)

@dp.message_handler(commands=['rss'])
async def quote_handler(message: types.Message):
    user_id = message.from_user.id
    await send_random_rss(user_id)

@dp.message_handler(commands=['bd7'])
async def quote_handler(message: types.Message):
    user_id = message.from_user.id
    await send_birthday(user_id, 7)

@dp.message_handler(commands=['bd30'])
async def quote_handler(message: types.Message):
    user_id = message.from_user.id
    await send_birthday(user_id, 30)

@dp.message_handler(commands=['shorts'])
async def quote_handler(message: types.Message):
    user_id = message.from_user.id
    await send_random_shorts(user_id)

@dp.message_handler(commands=['todayscore'])
async def todayscore_handler(message: types.Message):
    # Define directory
    directory = ROOT_PATH
    current_date = dt.now().strftime('%Y-%m-%d')
    
    # Get the scores
    total_score, role_task_points = count_tasks_points_for_today(directory, current_date)
    
    # Prepare a list of tuples containing scores and roles
    scores_roles = []
    for role, scores in role_task_points.items():
        role_score = sum(scores.values())
        if role_score > 0:
            scores_roles.append((role_score, role))

    # Sort roles by score in descending order
    sorted_scores_roles = sorted(scores_roles, key=lambda x: x[0], reverse=True)
    
    # Prepare the response
    response = f"–°–µ–≥–æ–¥–Ω—è –∑–∞ –¥–µ–Ω—å –Ω–∞–±—Ä–∞–Ω–æ: {total_score} –æ—á–∫–æ–≤\n\n"
    
    for score, role in sorted_scores_roles:
        response += f"{score:02} = {role}\n"

    await message.answer(response, parse_mode=ParseMode.MARKDOWN)

def count_tasks_points_for_today(directory, date):
    scores = {'üü©': 1, 'üü®': 5, 'üü•': 10}
    role_task_counter = {}
    total_score = 0
    
    # Iterate over files in the directory and subdirectories
    for root, _, files in os.walk(directory):
        for file in files:
            if file.endswith('.md'):
                with open(os.path.join(root, file), 'r', encoding='utf-8') as f:
                    content = f.read()
                # Extract the role name
                match = re.search(r'Role2:: #(\w+)', content)
                if match:
                    role = match.group(1)
                else:
                    continue  # Skip file if no role is found
                
                if role not in role_task_counter:
                    role_task_counter[role] = Counter()
                
                # Find all completed tasks for today
                completed_tasks = re.findall(r'- \[x\].*‚úÖ ' + date, content)
                for task in completed_tasks:
                    # Check each type of task in each completed task
                    for task_type, score in scores.items():
                        if task_type in task:
                            total_score += score
                            role_task_counter[role][task_type] += score

    return total_score, role_task_counter

async def todayscore_handler(message: types.Message):
    # Define directory
    directory = ROOT_PATH
    current_date = dt.now().strftime('%Y-%m-%d')
    
    # Get the scores
    total_score, role_task_points = count_tasks_points_for_today(directory, current_date)
    
    # Prepare the response
    response = f"–°–µ–≥–æ–¥–Ω—è –∑–∞ –¥–µ–Ω—å –Ω–∞–±—Ä–∞–Ω–æ: {total_score} –æ—á–∫–æ–≤\n\n"
    for role, scores in role_task_points.items():
        response += f"{role}: {sum(scores.values())} –æ—á–∫–æ–≤\n"

    await message.answer(response)

def get_wu7_data(file_path):
    with open(file_path, "r", encoding="utf-8") as file:
        lines = file.readlines()
    data = {}
    for line in lines:
        match = re.search(r"‚úÖ (\d{4}-\d{2}-\d{2})", line)
        if match:
            date = match.group(1)
            if "–≤—Å—Ç–∞–≤–∞—Ç—å–≤7" in line:
                color_code = 0  # –í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∫–æ–¥ —Ü–≤–µ—Ç–∞, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π
            else:
                continue
            data[date] = color_code
    return data

@dp.message_handler(Command('wu7'))
async def send_sww_chart(message: types.Message):
    file_path = Path(WAKE_UP_PATH)
    if not file_path.exists():
        await message.answer("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã
    today = dt.now()
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
    sww_data = get_wu7_data(file_path)
    img_path = visualize_sleep_calendar(sww_data, today.year, today.month, chart_title="–¢—Ä–µ–∫–µ—Ä –ø—Ä–æ—Å—ã–ø–∞–Ω–∏—è –≤ 7", file_name="wu7_chart.png")
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    with open(img_path, "rb") as file:
        await bot.send_photo(chat_id=message.from_user.id, photo=file)

def get_sleep_data(file_path):
    with open(file_path, "r", encoding="utf-8") as file:
        lines = file.readlines()
    data = {}
    for line in lines:
        match = re.search(r"‚úÖ (\d{4}-\d{2}-\d{2})", line)
        if match:
            date = match.group(1)
            if "–õ—ë–≥ —Å–ø–∞—Ç—å –¥–æ 22:00" in line:
                color_code = 0
            elif "–õ—ë–≥ —Å–ø–∞—Ç—å –¥–æ 23:00" in line:
                color_code = 1
            elif "–õ—ë–≥ —Å–ø–∞—Ç—å –¥–æ 00:00" in line:
                color_code = 2
            else:
                continue
            data[date] = color_code
    return data

colormap = ListedColormap(['white', 'red', 'yellow', 'green'])

def visualize_sleep_calendar(data, year, month, chart_title="–¢—Ä–µ–∫–µ—Ä —Å–Ω–∞", file_name="sleep_chart.png"):
    colors = {
        -1: "Lavender", # –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö
        0: "SpringGreen",    # –î–æ 22:00
        1: "Gold", # –î–æ 23:00
        2: "DarkOrange"   # –î–æ 00:00
    }
    # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å
    month_calendar = np.zeros((5, 7), dtype=int) - 1
    first_weekday, days_in_month = calendar.monthrange(year, month)
    for day in range(1, days_in_month + 1):
        date_str = f"{year}-{month:02d}-{day:02d}"
        if date_str in data:
            week = (day + first_weekday - 1) // 7
            weekday = (day + first_weekday - 1) % 7
            month_calendar[week, weekday] = data[date_str]
    fig, ax = plt.subplots(figsize=(10, 6))
    cax = ax.matshow(month_calendar, cmap=ListedColormap([colors[val] for val in [-1, 0, 1, 2]]), vmin=-1, vmax=2)
    ax.set_xticks(np.arange(7))
    ax.set_yticks(np.arange(5))
    ax.set_xticklabels(calendar.day_abbr)
    ax.set_yticklabels(range(1, 6))
    for i in range(5):
        for j in range(7):
            day_num = i*7 + j - first_weekday + 1
            if 0 < day_num <= days_in_month:
                ax.text(j, i, str(day_num), va='center', ha='center', color='black', fontsize=16)
    plt.title(f"{chart_title} - {calendar.month_name[month]} {year}")
    plt.savefig(file_name) # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    plt.close() # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ä–∏—Å—É–Ω–æ–∫
    return file_name

@dp.message_handler(Command('sleep'))
async def send_sleep_chart(message: types.Message):
    file_path = Path(SLEEP_PATH)
    if not file_path.exists():
        await message.answer("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã
    today = dt.now()
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
    sleep_data = get_sleep_data(file_path)
    img_path = visualize_sleep_calendar(sleep_data, today.year, today.month, chart_title="–¢—Ä–µ–∫–µ—Ä —Å–Ω–∞")
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    with open(img_path, "rb") as file:
        await bot.send_photo(chat_id=message.from_user.id, photo=file)

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç—Ä–æ–∫–∏ –ø–æ id
class DelForm(StatesGroup):
    row_id = State()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /del
@dp.message_handler(Command('del'))
async def delete_trigger(message: types.Message):
    await DelForm.row_id.set()
    await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏ —Å–≤—è–∑–∫–∏, –∫–æ—Ç–æ—Ä—É—é –Ω–∞–¥–æ —É–¥–∞–ª–∏—Ç—å.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ id –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /del
@dp.message_handler(state=DelForm.row_id)
async def process_delete(message: types.Message, state: FSMContext):
    row_id = message.text
    if not row_id.isdigit():
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏.")
        return

    conn = sqlite3.connect('trigger_words.db')
    cursor = conn.cursor()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Å—Ç—Ä–æ–∫–∏ —Å –¥–∞–Ω–Ω—ã–º id –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    cursor.execute("SELECT * FROM triggers WHERE id=?", (row_id,))
    row = cursor.fetchone()

    if row:
        # –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –Ω–∞–π–¥–µ–Ω–∞, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        row_data = str(row)

        # –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫—É
        cursor.execute("DELETE FROM triggers WHERE id=?", (row_id,))
        conn.commit()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–∞–Ω–Ω—ã–º–∏ —É–¥–∞–ª–µ–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
        await message.answer(f"–°—Ç—Ä–æ–∫–∞ —Å –Ω–æ–º–µ—Ä–æ–º {row_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞! –≠—Ç–æ –±—ã–ª–∞ —Å—Ç—Ä–æ–∫–∞ —Å–æ —Å–ª–µ–¥—É—é—â–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏: \"{row_data}\"")
    else:
        await message.answer(f"–°—Ç—Ä–æ–∫–∞ —Å –Ω–æ–º–µ—Ä–æ–º {row_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
    
    await state.finish()  # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º


# –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–µ–π—Ç–æ–≤ (—Å–æ—Å—Ç–æ—è–Ω–∏–π) –¥–ª—è –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞
class Form(StatesGroup):
    trigger_word = State()  # –í–≤–µ–¥–µ–Ω–∏–µ —Ç—Ä–∏–≥–≥–µ—Ä–Ω–æ–≥–æ —Å–ª–æ–≤–∞
    inbox_path = State()  # –í—ã–±–æ—Ä –ø—É—Ç–∏ –¥–æ —Ñ–∞–π–ª–∞
    filename = State()  # –í–≤–µ–¥–µ–Ω–∏–µ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞

@dp.message_handler(Command('add'))
async def add_trigger_word(message: types.Message):
    await Form.trigger_word.set()
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ç—Ä–∏–≥–≥–µ—Ä–Ω–æ–µ —Å–ª–æ–≤–æ.")

def get_unique_paths_from_db():
    conn = sqlite3.connect('trigger_words.db')
    cursor = conn.cursor()
    cursor.execute("SELECT DISTINCT inbox_path FROM triggers")
    paths = [row[0] for row in cursor.fetchall()]
    return paths

@dp.message_handler(state=Form.trigger_word)
async def process_trigger_word(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['trigger_word'] = message.text.lower()

    unique_paths = "123"
    
    if unique_paths:
        markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–Ω–µ—á–Ω—ã–µ —á–∞—Å—Ç–∏ –ø—É—Ç–µ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∞—Ö
        display_paths = [path.replace(BASE_PATH, '') for path in unique_paths]
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω–µ—á–Ω—ã–µ —á–∞—Å—Ç–∏ –ø—É—Ç–µ–π
        display_paths = sorted(display_paths)

        for display_path in display_paths:
            markup.add(KeyboardButton(text=display_path))
        
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø—É—Ç—å –¥–æ —Ñ–∞–π–ª–∞ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–æ–≤—ã–π.", reply_markup=markup)
        await Form.inbox_path.set()  # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é –æ–∂–∏–¥–∞–Ω–∏—è –ø—É—Ç–∏
    else:
        await message.answer("–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø—É—Ç–µ–π. –ù–∞–ø–∏—à–∏—Ç–µ –ø—É—Ç—å.")
        await Form.inbox_path.set()  # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é –æ–∂–∏–¥–∞–Ω–∏—è –ø—É—Ç–∏


# –ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–º —ç—Ç–∞–ø–µ:
@dp.message_handler(state=Form.inbox_path)
async def process_inbox_path(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        # –ï—Å–ª–∏ –≤–≤–µ–¥–µ–Ω–Ω—ã–π –ø—É—Ç—å –Ω–µ –ø–æ–ª–Ω—ã–π, –¥–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–π –ø—É—Ç—å –∫ –Ω–∞—á–∞–ª—É
        if BASE_PATH not in message.text:
            full_path = BASE_PATH + message.text
        else:
            full_path = message.text
        data['inbox_path'] = full_path

    await message.answer("–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞")
    await Form.filename.set()  # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é –æ–∂–∏–¥–∞–Ω–∏—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞

@dp.message_handler(state=Form.filename)
async def process_filename(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        trigger_word = data['trigger_word']
        inbox_path = data['inbox_path']
        filename = message.text
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    conn = sqlite3.connect('trigger_words.db')
    cursor = conn.cursor()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã triggers –∏ –µ—ë —Å–æ–∑–¥–∞–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
    cursor.execute("""CREATE TABLE IF NOT EXISTS triggers (
                        id INTEGER PRIMARY KEY,
                        trigger_word TEXT NOT NULL,
                        inbox_path TEXT NOT NULL,
                        filename TEXT NOT NULL
                      )""")
    
    cursor.execute("INSERT INTO triggers (trigger_word, inbox_path, filename) VALUES (?, ?, ?)",
                   (trigger_word, inbox_path, filename))
    conn.commit()
    conn.close()

    await state.finish()
    await message.answer(f"–ù–æ–≤–∞—è —Å–≤—è–∑–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: {trigger_word}, {inbox_path}, {filename}")

@dp.message_handler(Command('help'))
async def send_triggers(message: types.Message):
    # –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∏ –≤—ã–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö
    conn = sqlite3.connect('trigger_words.db')
    cursor = conn.cursor()
    # –ò–∑–º–µ–Ω–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –≤—ã–±–æ—Ä–∞ id, trigger_word –∏ filename
    cursor.execute("SELECT id, trigger_word, filename FROM triggers")
    triggers = cursor.fetchall()
    # –ò–∑–º–µ–Ω–µ–Ω–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—ã–≤–æ–¥–∞, —á—Ç–æ–±—ã –≤–∫–ª—é—á–∏—Ç—å id
    triggers_str_list = [f"{id}. {trigger} = {filename}" for id, trigger, filename in triggers]
    triggers_str = "\n".join(triggers_str_list)

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –Ω–æ–≤—ã—Ö —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤
    additional_text = (
        "–≥–≥–≥ - —ç—Ç–æ –≥–æ—Ç–æ–≤–æ, –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –¥–∞—Ç–æ–π\n"
        "—Å—Å—Å - –ø—Ä–æ—Å—Ç–∞–≤–ª—è–µ—Ç –¥–∞—Ç—É —Å–µ–≥–æ–¥–Ω—è\n"
        "—Ö—Ö—Ö –∏ –•–•–• - —Ö–∞–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç, –ø—Ä–æ—Å—Ç–∞–≤–ª—è–µ—Ç –≤—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç\n"
        "–∑–∑–∑ - –∑–∞–≤—Ç—Ä–∞\n"
        "–ø–ø–∑–∑ - –ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞\n"
        "–≤–≤—á—á - –≤—á–µ—Ä–∞\n"
        "—Å—Å–ø–ø - —Å–ª–µ–¥—É—é—â–∏–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫\n"
        "222 - –∂—ë–ª—Ç–∞—è –∑–∞–¥–∞—á–∞\n"
        "333 - –∫—Ä–∞—Å–Ω–∞—è –∑–∞–¥–∞—á–∞\n"
        "–º–º–º - –¥–æ–±–∞–≤–ª—è–µ—Ç —Ç–µ–≥ –º—ã—Å–ª—å –≤ –∑–∞–¥–∞—á—É\n"
        "–∫—É–ø–∏—Ç—å - –¥–æ–±–∞–≤–ª—è–µ—Ç —ç–º–æ–¥–∑—é üí∞\n"
        "–∞–ø—Ç–µ–∫–∞ - –¥–æ–±–∞–≤–ª—è–µ—Ç —ç–º–æ–¥–∑—é üíä\n"
        "–∞—á–∏–≤–∫–∞ - –¥–æ–±–∞–≤–ª—è–µ—Ç —ç–º–æ–¥–∑—é üèÜ\n"
        "–ª–∏–Ω–∫—Å - –¥–æ–±–∞–≤–ª—è–µ—Ç —ç–º–æ–¥–∑—é üîó\n"
        "–ø–ø–ø - –ø–æ–º–æ—â–Ω–∏–∫ - –¥–æ–±–∞–≤–ª—è–µ—Ç —ç–º–æ–¥–∑—é üë©‚Äçüíº\n"
        "–¥—Ä - –¥–æ–±–∞–≤–ª—è–µ—Ç —ç–º–æ–¥–∑—é üéÇ\n"
    )

    # –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    full_message = additional_text + "\n\nHere are the available triggers:\n" + triggers_str
    if triggers_str:
        await message.answer(full_message)
    else:
        await message.answer("No triggers found in the database.")


async def add_note(message: types.Message, filename, is_trigger_word=True):
    note_content = message.text
    if is_trigger_word:
        note_content = " ".join(message.text.split()[1:])
    
    note_content_words = note_content.split()
    if note_content_words:
        first_word = note_content_words[0]
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ URL-—Å—Å—ã–ª–∫–æ–π
        if not re.match(r'http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+', first_word):
            note_content_words[0] = first_word.lower()

        note_content = ' '.join(note_content_words)

        if note_content:
            curr_date = dt.now().strftime('%Y-%m-%d')
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è "–∑–∑–∑" –∏ "–ø–ø–∑–∑"
            
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è "–≥–æ—Ç–æ–≤–æ" –∏ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è note_text
            if "–≥–≥–≥" in note_content:
                note_text = f'\n- [x] üü© {note_content} ‚ûï {curr_date} üìÖ {curr_date} ‚úÖ {curr_date}'
            else:
                note_text = f'\n- [ ] üü© {note_content} ‚ûï {curr_date} '
            
            if "–º–º–º" in note_content:
                note_text = note_text.replace("üü©", "#–º—ã—Å–ª—å üü©")
                note_content = note_content.replace("–º–º–º", "")
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç–º–æ–¥–∑–∏ –≤ –Ω–∞—á–∞–ª–æ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
            emoji_dict = {
                "–∫—É–ø–∏—Ç—å": "üí∞",
                "–∞–ø—Ç–µ–∫–∞": "üíä",
                "–∞—á–∏–≤–∫–∞": "üèÜ",
                "–ª–∏–Ω–∫—Å": "üîó",
                "–ø–ø–ø": "üë©‚Äçüíº",
                " –¥—Ä ": "üéÇ"
            }
            for word, emoji in emoji_dict.items():
                if word in note_content:
                    note_text = note_text.replace("üü©", f"üü©{emoji}")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è "–ª–∏–Ω–∫—Å"
            if "–ª–∏–Ω–∫—Å" in note_content:
                note_text = note_text.replace("üü©", "üü©üîó")
            
            # –û—Å—Ç–∞–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –±—ã–ª–∏ –≤ —Ñ—É–Ω–∫—Ü–∏–∏
            if "—Å—Å—Å" in note_content and "–≥–æ—Ç–æ–≤–æ" not in note_content:
                note_text += f'üìÖ {curr_date} '
            
            if "–∑–∑–∑" in note_content:
                curr_date = (dt.now() + timedelta(days=1)).strftime('%Y-%m-%d')
                note_content = note_content.replace("–∑–∑–∑", "")
                note_text += f'üìÖ {curr_date} '

            if "—Å—Å–ø–ø" in note_content:
                # –ù–∞–π—Ç–∏ –±–ª–∏–∂–∞–π—à–∏–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
                today = dt.now()
                next_monday = today + timedelta(days=(7 - today.weekday()))
                curr_date = next_monday.strftime('%Y-%m-%d')
                note_content = note_content.replace("—Å—Å–ø–ø", "")
                note_text += f'üìÖ {curr_date} '            

            if "–ø–ø–∑–∑" in note_content:
                curr_date = (dt.now() + timedelta(days=2)).strftime('%Y-%m-%d')
                note_content = note_content.replace("–ø–ø–∑–∑", "")
                note_text += f'üìÖ {curr_date} '
            
            if "–≤–≤—á—á" in note_content:
                curr_date = (dt.now() - timedelta(days=1)).strftime('%Y-%m-%d')
                note_content = note_content.replace("–≤–≤—á—á", "")
                note_text += f'üìÖ {curr_date} '

            if "—Ö—Ö—Ö" in note_content:
                note_text = note_text.replace('‚ûï', f'‚è´ ‚ûï')

            if "–•–•–•" in note_content:
                note_text = note_text.replace('‚ûï', f'‚è´ ‚ûï')
            
            if "222" in note_content:
                note_text = note_text.replace('üü©', 'üü®')
            elif "333" in note_content:
                note_text = note_text.replace('üü©', 'üü•')
            
            # –£–±–∏—Ä–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ note_text
            search_pattern = os.path.join(ROOT_PATH, '**', f"{filename}.md")
            files_found = [file for file in glob.glob(search_pattern, recursive=True) if os.path.basename(file) == f"{filename}.md"]
            
            if files_found:
                DIRNAME = files_found[0]  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π —Ñ–∞–π–ª, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∫—Ä–∏—Ç–µ—Ä–∏—è–º
                with open(DIRNAME, 'a', encoding='UTF-8') as f:
                    f.write(note_text)
                await message.answer("–ó–∞–º–µ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
            else:
                await message.answer("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞!")


def clean_filename(filename):
    # –£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –≤ –∏–º–µ–Ω–∞—Ö —Ñ–∞–π–ª–æ–≤ –∏ —ç–º–æ–¥–∑–∏
    filename = re.sub(r'[\\/*?:"<>|]', '', filename)  # –£–¥–∞–ª–µ–Ω–∏–µ —Å–∏–º–≤–æ–ª–æ–≤, –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –≤ Windows
    filename = re.sub(r'[#]', '', filename)  # –£–¥–∞–ª–µ–Ω–∏–µ —Ö—ç—à—Ç–µ–≥–æ–≤
    # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–æ—á–µ–∫ –∏–∑ —Å—Ç—Ä–æ–∫–∏
    filename = filename.replace('.', '')
    filename = filename.replace('(', '')
    filename = filename.replace(')', '')
    # –£–¥–∞–ª–µ–Ω–∏–µ —ç–º–æ–¥–∑–∏ –∏ –¥—Ä—É–≥–∏—Ö —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ –ø—Ä–æ–±–µ–ª—ã
    filename = re.sub(r'[^\w\s\-_,()]', '', filename)
    # –ó–∞–º–µ–Ω–∞ –¥–≤–æ–π–Ω—ã—Ö, —Ç—Ä–æ–π–Ω—ã—Ö –∏ –ª—é–±—ã—Ö –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π –ø—Ä–æ–±–µ–ª–æ–≤ –Ω–∞ –æ–¥–∏–Ω–∞—Ä–Ω—ã–µ
    filename = re.sub(r'\s+', ' ', filename)
    return filename

async def download_youtube_video(url, path_to_save):
    def _download():
        ydl_opts = {
            'format': 'best',
            'outtmpl': path_to_save,
            'postprocessors': [{
                'key': 'FFmpegVideoConvertor',
                'preferedformat': 'mp4',  # –£–∫–∞–∂–∏—Ç–µ –≤–∞—à –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–¥–µ—Å—å
            }],
        }
        with YoutubeDL(ydl_opts) as ydl:
            ydl.download([url])
    await asyncio.get_event_loop().run_in_executor(None, _download)

async def get_video_title(url):
    with YoutubeDL() as ydl:
        info_dict = ydl.extract_info(url, download=False)
        video_title = info_dict.get("title", None)
    return clean_filename(video_title)

async def save_shorts(message: types.Message, file_name_suffix, bot):
    urls = re.findall(r'(https?://(?:www\.)?youtube\.com/shorts/[^\s?]+)', message.text)
    if not urls:
        urls = re.findall(r'(https?://youtube\.com/shorts/[^\s?]+)', message.text)
        if not urls:
            return None  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º None, –µ—Å–ª–∏ URL –Ω–µ –Ω–∞–π–¥–µ–Ω
    video_url = urls[0]  # –ë–µ—Ä—ë–º –ø–µ—Ä–≤—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π URL
    video_title = await get_video_title(video_url)  # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ
    video_path = VIDEO_PATH
    current_time = dt.now()
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –∏ –æ—á–∏—â–∞–µ–º –µ–≥–æ
    cleaned_filename = clean_filename(f"—à–æ—Ä—Ç—Å - {current_time.strftime('%Y-%m-%d %H%M%S')} - {video_title}")
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤, –Ω–µ —Å—á–∏—Ç–∞—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
    if len(cleaned_filename) > 100:  # –£–º–µ–Ω—å—à–∞–µ–º –¥–æ 95, —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
        cleaned_filename = cleaned_filename[:100]
    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ .mp4
    filename_with_extension = f"{cleaned_filename}.mp4"
    full_path = os.path.join(video_path, filename_with_extension)
    await download_youtube_video(video_url, full_path)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–∑–≤–ª–µ—á—ë–Ω–Ω—ã–π URL
    return filename_with_extension

@dp.message_handler(content_types=['text', 'photo', 'document', 'voice'])
async def process_message(message: types.Message):
    # –£—Å–ª–æ–≤–∏–µ, –µ—Å–ª–∏ –≤ –û–±—Å–ê—Å—Å —Ä–µ–ø–æ—Å—Ç–∏—à—å —Å –†–∏–¥–°—Ç—Ä–∏–∫ –±–æ—Ç–∞, —Ç–æ –æ–Ω –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–±—Ä–∞—Ç—å –∫–Ω–∏–∂–∫—É –∫—É–¥–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å
    if message.forward_from and message.forward_from.is_bot:
        files = [f for f in os.listdir(directory) if f.endswith('.md') and '+' not in f]  # –ò—Å–∫–ª—é—á–∞–µ–º —Ñ–∞–π–ª—ã —Å "+" –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏
        markup = InlineKeyboardMarkup(row_width=2)
        for file in files:
            file_name_without_extension = file[:-3]  # –£–¥–∞–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ ".md"
            # –ï—Å–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –Ω–∞ "–∫–Ω–∏–≥–∞ - ", —É–¥–∞–ª—è–µ–º —ç—Ç—É —á–∞—Å—Ç—å
            if file_name_without_extension.startswith("–∫–Ω–∏–≥–∞ - "):
                file_name_without_extension = file_name_without_extension.replace("–∫–Ω–∏–≥–∞ - ", "", 1)
            short_name = shorten_name(file_name_without_extension)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –±–µ–∑ "–∫–Ω–∏–≥–∞ - " –∏ –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
            short_code = generate_short_code(file)  # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ—Ä–æ—Ç–∫–∏–π –∫–æ–¥ –¥–ª—è callback_data
            button = InlineKeyboardButton(short_name, callback_data='save_to_file:' + short_code)
            markup.add(button)
        await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:", reply_markup=markup)
    elif message.text and ("youtube.com/shorts/" in message.text or "youtu.be/" in message.text): # –õ–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —à–æ—Ä—Ç—Å–æ–≤
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —à–æ—Ä—Ç—Å —Å –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–æ–º "—à–æ—Ä—Ç—Å"
        filename = await save_shorts(message, "—à–æ—Ä—Ç—Å", bot)
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –∑–∞–º–µ—Ç–∫—É, –≤–∫–ª—é—á–∞—è –∏—Å—Ö–æ–¥–Ω—É—é —Å—Å—ã–ª–∫—É –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        current_time = dt.now().strftime("%Y-%m-%d")
        message_text_with_filename = f"[[{filename}]] - {message.text}?feature=share"
        # –°–æ–∑–¥–∞—ë–º —Ñ–µ–π–∫–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        message_timestamp = int(message.date.timestamp())
        fake_message = types.Message(message_id=message.message_id, chat=message.chat, date=message_timestamp, text=message_text_with_filename)
        await handle_non_trigger_message_shorts(fake_message)  # –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ –ø—Ä—è–º–æ–π –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –Ω–µ-—Ç—Ä–∏–≥–≥–µ—Ä–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    elif message.text:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ç—Ä–∏–≥–≥–µ—Ä–∞
        if message.text.split()[0].lower() in get_triggers():
            await handle_message(message)
        else:
            # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å —Ç—Ä–∏–≥–≥–µ—Ä–∞, –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ-—Ç—Ä–∏–≥–≥–µ—Ä–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            await handle_non_trigger_message(message)
    
    elif message.photo: # –õ–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ
        if message.caption:  # –§–æ—Ç–æ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º
            trigger_word = message.caption.split()[0].lower()
            file_name_suffix = trigger_word if trigger_word in get_triggers() else "–∏–Ω–±–æ–∫—Å"
            filename = await save_photo(message, file_name_suffix, bot)

            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –∫ —Ç–µ–∫—Å—Ç—É –æ–ø–∏—Å–∞–Ω–∏—è
            message_with_filename = f"{message.caption} [[{filename}]]"
            
            if trigger_word in get_triggers():
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ handle_message
                message.text = message_with_filename
                await handle_message(message)
            else:
                # –°–æ–∑–¥–∞–µ–º —Ñ–µ–π–∫–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –Ω–µ-—Ç—Ä–∏–≥–≥–µ—Ä–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                message_timestamp = int(message.date.timestamp())
                fake_message = Message(message_id=message.message_id, chat=message.chat, date=message_timestamp, text=message_with_filename)
                await handle_non_trigger_message(fake_message)
        else:  # –§–æ—Ç–æ –±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è
            filename = await save_photo(message, "–∏–Ω–±–æ–∫—Å", bot)
            # –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–µ–π–∫–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º —Ñ–∞–π–ª–∞ –≤ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö —Å–∫–æ–±–∫–∞—Ö
            message_timestamp = int(message.date.timestamp())
            fake_message_text = f"[[{filename}]]"
            fake_message = Message(message_id=message.message_id, chat=message.chat, date=message_timestamp, text=fake_message_text)
            await handle_non_trigger_message(fake_message)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ
async def save_photo(message: types.Message, file_name_suffix, bot):
    global last_photo_time, last_photo_index
    photo_path = PHOTO_PATH
    current_time = dt.now()
    if last_photo_time and current_time.strftime("%Y-%m-%d %H-%M-%S") == last_photo_time.strftime("%Y-%m-%d %H-%M-%S"):
        last_photo_index += 1
    else:
        last_photo_index = 1
        last_photo_time = current_time
    filename = f"{current_time.strftime('%Y-%m-%d %H-%M-%S')} - {file_name_suffix} - {str(last_photo_index).zfill(2)}.jpg"
    photo_id = message.photo[-1].file_id
    file_path = await bot.get_file(photo_id)
    file = await bot.download_file(file_path.file_path)
    with open(os.path.join(photo_path, filename), 'wb') as photo_file:
        photo_file.write(file.getvalue())
    return filename


@dp.callback_query_handler(lambda c: c.data and c.data.startswith('save_to_file:'))
async def handle_file_selection(callback_query: types.CallbackQuery):
    file_codes = {generate_short_code(f): f for f in os.listdir(directory) if f.endswith('.md')}
    short_code = callback_query.data.split(':')[1]
    file_name = file_codes.get(short_code)  # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ —Å–ª–æ–≤–∞—Ä—è
    if not file_name:
        await bot.answer_callback_query(callback_query.id, "–û—à–∏–±–∫–∞: –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    file_path = os.path.join(directory, file_name)
    message = callback_query.message  # –°–æ–æ–±—â–µ–Ω–∏–µ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É
    if message.reply_to_message and message.reply_to_message.text:
        # –ó–∞–º–µ–Ω—è–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫–∏ –Ω–∞ –ø—Ä–æ–±–µ–ª—ã –∏ —É–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
        text = ' '.join(message.reply_to_message.text.replace('\r\n', '\n').split())
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –¥–∞—Ç–∞–º–∏ –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏
        current_date = dt.now().strftime("%Y-%m-%d")
        formatted_text = f"\n- [x] üü© {text} ‚ûï {current_date} ‚úÖ {current_date}\n"
        
        with open(file_path, 'a', encoding='utf-8') as file:  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –∫–æ–¥–∏—Ä–æ–≤–∫—É UTF-8
            file.write(formatted_text)
        await bot.answer_callback_query(callback_query.id, f"–¢–µ–∫—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {shorten_name(file_name)}")
    else:
        await bot.answer_callback_query(callback_query.id, "–û—à–∏–±–∫–∞: –ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
def shorten_name(name, max_length=40):
    if len(name) > max_length:
        return name[:max_length-3] + '...'
    return name

def generate_short_code(file_name, max_length=10):
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—É—é –ª–æ–≥–∏–∫—É –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
    return file_name[:max_length]

@dp.message_handler(lambda message: message.text and message.text.split()[0].lower() in get_triggers())
async def handle_message(message: types.Message):
    conn = sqlite3.connect('trigger_words.db')
    cursor = conn.cursor()
    first_word = message.text.split()[0]
    if re.match(r'http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+', first_word):
        trigger_word = first_word
    else:
        trigger_word = first_word.lower()
    cursor.execute("SELECT trigger_word, filename FROM triggers WHERE trigger_word = ?", (trigger_word,))
    fetch_result = cursor.fetchone()
    if fetch_result is None:
        trigger_word = "–∏–Ω–±–æ–∫—Å"
        cursor.execute("SELECT trigger_word, filename FROM triggers WHERE trigger_word = ?", (trigger_word,))
        fetch_result = cursor.fetchone()
    _, filename = fetch_result
    await add_note(message, filename, True)


@dp.message_handler(lambda message: not message.text.split()[0].lower() in get_triggers())
async def handle_non_trigger_message(message: types.Message):
    # –¢–∞–∫ –∫–∞–∫ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞ –Ω–µ—Ç, —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –æ–Ω–æ "–∏–Ω–±–æ–∫—Å"
    trigger_word = "–∏–Ω–±–æ–∫—Å"
    conn = sqlite3.connect('trigger_words.db')
    cursor = conn.cursor()
    # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, —á—Ç–æ–±—ã –∏–∑–≤–ª–µ—á—å —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ –ø–æ–ª—è
    cursor.execute("SELECT trigger_word, filename FROM triggers WHERE trigger_word = ?", (trigger_word,))
    _, filename = cursor.fetchone()
    conn.close()

    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ add_note, —É–±—Ä–∞–≤ –ø–∞—Ä–∞–º–µ—Ç—Ä inbox_path
    await add_note(message, filename, False)


@dp.message_handler(lambda message: not message.text.split()[0].lower() in get_triggers())
async def handle_non_trigger_message_shorts(message: types.Message):
    # –¢–∞–∫ –∫–∞–∫ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞ –Ω–µ—Ç, —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –æ–Ω–æ "—à–æ—Ä—Ç—Å"
    trigger_word = "—à–æ—Ä—Ç—Å"
    conn = sqlite3.connect('trigger_words.db')
    cursor = conn.cursor()
    # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, —á—Ç–æ–±—ã –∏–∑–≤–ª–µ—á—å —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ –ø–æ–ª—è
    cursor.execute("SELECT trigger_word, filename FROM triggers WHERE trigger_word = ?", (trigger_word,))
    _, filename = cursor.fetchone()
    conn.close()

    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ add_note, —É–±—Ä–∞–≤ –ø–∞—Ä–∞–º–µ—Ç—Ä inbox_path
    await add_note(message, filename, False)


def get_triggers():
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç—Ä–∏–≥–≥–µ—Ä–Ω—ã—Ö —Å–ª–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    conn = sqlite3.connect('trigger_words.db')
    cursor = conn.cursor()

    cursor.execute("SELECT trigger_word FROM triggers")
    triggers = [row[0] for row in cursor.fetchall()]


    return triggers

@dp.errors_handler()
async def error_handler(update: types.Update, exception: Exception):
    logging.exception(f"Exception: {repr(exception)}")
    return True  # –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –≤—ã–∑–æ–≤ —Å–ª–µ–¥—É—é—â–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –æ—à–∏–±–æ–∫

@dp.message_handler(lambda message: True, state="*")
async def debug_state(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    logging.info(f"Current state: {current_state}")
    await message.answer(f"Current state: {current_state}")


if __name__ == "__main__":
    from aiogram import executor
    scheduler = AsyncIOScheduler()
    user_id_to_send = 5922128322
    days = 30
    scheduler.add_job(send_random_quote, 'cron', day='*', hour=4, minute=0, args=[user_id_to_send], misfire_grace_time=300)  # 300 —Å–µ–∫—É–Ω–¥ –≥—Ä–∞—Ü–∏–∏  # –ù–∞–ø—Ä–∏–º–µ—Ä, –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 00:01
    scheduler.add_job(send_random_minds, 'cron', day='*', hour=4, minute=2, args=[user_id_to_send], misfire_grace_time=300)
    scheduler.add_job(send_random_rss, 'cron', day='*', hour=4, minute=4, args=[user_id_to_send], misfire_grace_time=300)
    scheduler.add_job(send_random_shorts, 'cron', day='*', hour=4, minute=6, args=[user_id_to_send], misfire_grace_time=300)
    scheduler.add_job(send_birthday, 'cron', day_of_week='mon', hour=4, minute=8, args=[user_id_to_send, days], misfire_grace_time=300)
    scheduler.start()
    executor.start_polling(dp, skip_updates=True)
